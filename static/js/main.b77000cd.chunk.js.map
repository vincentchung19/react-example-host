{"version":3,"sources":["logo.svg","List.js","App.js","Api.js","Dom.js","serviceWorker.js","index.js"],"names":["module","exports","List","props","items","map","item","index","key","Component","App","handleSubmit","event","preventDefault","setState","state","todoItem","handleChange","target","value","src","logo","className","alt","onSubmit","this","onChange","Home","ListView","to","NoMatch","DetailView","match","params","name","Column","Fragment","React","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","element","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2GAAAA,EAAOC,QAAU,IAA0B,kC,gNCU5BC,MARf,SAAcC,GACV,OACI,4BACKA,EAAMC,MAAMC,KAAI,SAACC,EAAKC,GAAN,OAAc,wBAAIC,IAAKD,GAAQD,MADpD,MCQYG,YA0CCA,Y,IAwENC,E,kDA9Cb,WAAYP,GAAO,IAAD,8BAChB,cAAMA,IAORQ,aAAe,SAACC,GACdA,EAAMC,iBACN,EAAKC,SAAS,CACZV,MAAM,GAAD,mBAAK,EAAKW,MAAMX,OAAhB,CAAsB,EAAKW,MAAMC,WACtCA,SAAS,MAZK,EAgBlBC,aAAe,SAACL,GACdA,EAAMC,iBACN,EAAKC,SAAS,CACZE,SAASJ,EAAMM,OAAOC,SAjBtB,EAAKJ,MAAM,CACTC,SAAU,GACVZ,MAAO,IAJK,E,qDAwBhB,OACE,6BACE,gCACE,yBAAKgB,IAAKC,IAAMC,UAAU,WAAWC,IAAI,UAM3C,0BAAMC,SAAUC,KAAKd,cACnB,2BAAOQ,MAAOM,KAAKV,MAAMC,SAAUU,SAAUD,KAAKR,eAClD,wCAGF,kBAAC,EAAD,CAAMb,MAAOqB,KAAKV,MAAMX,a,GAxCdK,a,GC3EAA,Y,cCIlB,SAASkB,IACL,OAAO,4CAGX,SAASC,IACL,OACI,6BACI,kBAAC,IAAD,CAAMC,GAAG,kBAAT,WAAwC,6BACxC,kBAAC,IAAD,CAAMA,GAAG,gBAAT,SAAoC,8BAKhD,SAASC,IACL,OAAO,kEAGX,SAASC,EAAT,GAA6B,IAARC,EAAO,EAAPA,MACjB,OAAO,2CAAiBA,EAAMC,OAAOC,KAA9B,KAGOzB,Y,IA6BZ0B,E,uKAEE,OAEI,kBAAC,IAAMC,SAAP,KACI,oCACA,wC,GANKC,IAAM5B,WC7CP6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAST,MACvB,2DCVNU,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SAOhD,IAAMC,EAAU,gCAFP,iBAEO,KAEhBJ,IAASC,OAAOG,EAAQF,SAASC,eAAe,WDkH1C,kBAAmBE,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b77000cd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\nfunction List(props){\r\n    return (\r\n        <ul>\r\n            {props.items.map((item,index)=><li key={index}>{item}</li>)} {/*Menampilkan list item*/}\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default List;","import React,{Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport List from './List';\n//Properties\n//props bisa di function\nfunction Greeting(props){\n  return <h1> Halo {props.name} - umurnya {props.age} </h1>\n}\n\n//STATE \n//state cuma bisa di class bukan di function karena dinamis\nclass Timer extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      time : props.start\n    }\n  }\n\n  \n  componentDidMount(){ //dijalankan setelah selesai load\n    this.addInterval = setInterval( ()=>this.increase() ,1000)\n  }\n\n  componentWillMount(){ //dihapus setelah selesai digunakan\n    clearInterval(this.addInterval)\n  }\n\n  increase(){\n    this.setState((state,props)=>({\n      time : parseInt(state.time) + 1\n    }))\n  }\n\n  render(){\n    return (\n    <div>{this.state.time} Detik</div>\n    );\n  }\n}\n\n//function handleClick\n// function Clicker(){\n//   function handleClick(e){\n//     alert(\"Berhasil Klik\")\n//     e.preventDefault();\n//   }\n//   return(\n//     <a href=\"#\" onClick={handleClick}> Klik </a>\n//   )\n// }\n\n//class handleClick\nclass Toggle extends Component{\n  constructor(props){\n    super(props)\n    this.state={\n      toggleStatus: true\n    }\n    this.handleClick = this.handleClick.bind(this)\n  }\n\n  handleClick(){\n    this.setState(state =>({\n      toggleStatus: !state.toggleStatus\n    }))\n  }\n\n  render(){\n    return(\n      <button onClick={this.handleClick}>\n        {this.state.toggleStatus ? 'ON' : 'OFF'}\n      </button>\n    )\n  }\n}\n\nclass App extends Component{\n\n  constructor(props){\n    super(props)\n      this.state={\n        todoItem :'',\n        items :[]\n      }\n  }\n\n  handleSubmit = (event) =>{\n    event.preventDefault()//wajib\n    this.setState({\n      items:[...this.state.items,this.state.todoItem], //menambah isi items selanjutnya\n      todoItem:''\n    })\n  }\n\n  handleChange = (event) =>{\n    event.preventDefault()\n    this.setState({\n      todoItem:event.target.value\n    })\n  }\n\n  render (){\n    return (\n      <div>\n        <header>\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          {/* <Greeting name=\"Vincent\" age=\"21\"/> */}\n          {/* <Clicker />  */}\n          {/* <Toggle />\n          <Timer start=\"0\"/> */}\n        </header>\n        <form onSubmit={this.handleSubmit}>\n          <input value={this.state.todoItem} onChange={this.handleChange}/>\n          <button>Add</button>\n        </form>\n\n        <List items={this.state.items} />\n      </div>\n    )\n  }\n}\n\n\n\nexport default App;\n","import React,{Component} from 'react';\r\nimport './App.css';\r\n\r\nclass Api extends Component{\r\n  constructor(props){\r\n      super(props)\r\n      this.state={\r\n          items:[],\r\n          isLoading:true\r\n      }\r\n  }\r\n\r\n  componentDidMount(){\r\n      fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then(Response =>Response.json())\r\n      .then(data => this.setState({items:data,isLoading:false}))\r\n  }\r\n\r\n  \r\n    render(){\r\n        const {items,isLoading} =this.state\r\n        if(isLoading){\r\n            return <p>Loading...</p>\r\n        }else{\r\n            return (\r\n                <div>\r\n                    <ul>\r\n                        {items.map((item,index) =>\r\n                            <li key=\"index\">{item.name} </li>)}\r\n                    </ul>\r\n                </div>\r\n            );\r\n        }\r\n        \r\n    }\r\n}\r\n\r\nexport default Api;\r\n","import React,{Component} from 'react';\r\nimport {BrowserRouter,Switch,Route,Link} from 'react-router-dom';\r\nimport './App.css';\r\n\r\n\r\n//SPA Page with Navigation\r\n\r\nfunction Home(){\r\n    return <h2>Halaman home</h2>\r\n}\r\n\r\nfunction ListView(){\r\n    return (\r\n        <div>\r\n            <Link to=\"/users/vincent\">Vincent</Link><br/>\r\n            <Link to=\"/users/chung\">Chung</Link><br/>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction NoMatch(){\r\n    return <h2>404, halaman tidak dapat ditemukan</h2>\r\n}\r\n\r\nfunction DetailView({match}){\r\n    return <h2>Ini halaman {match.params.name} </h2>\r\n}\r\n\r\nclass Dom extends Component{\r\n    render(){\r\n        return(\r\n          <BrowserRouter>\r\n            <div>\r\n                <nav>\r\n                    <li><Link to=\"/\">Home</Link></li>\r\n                    <li><Link to=\"/users\">User</Link></li>\r\n                </nav>\r\n                {/* Pakai Switch biar keganti terus, NoMatch tidak tampil terus\"an */}\r\n                <Switch> \r\n                    <Route path='/' exact component={Home} />\r\n                    <Route path='/users' exact component={ListView} />\r\n                    <Route path='/users/:name' exact component={DetailView} />\r\n                    <Route component={NoMatch} />\r\n                </Switch>\r\n            </div>\r\n\r\n            <table>\r\n                <h2>Table</h2>\r\n                <tr>\r\n                    <Column />\r\n                </tr>\r\n            </table>\r\n          </BrowserRouter>   \r\n        );\r\n    }\r\n}\r\n\r\nclass Column extends React.Component{\r\n    render(){\r\n        return(\r\n            //<React.Fragment key={item.id}> kalau mau pake key secara explisit\r\n            <React.Fragment> \r\n                <td>Satu</td>\r\n                <td>Dua</td>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Dom;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Api from './Api';\nimport Dom from './Dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />,document.getElementById('root') );\n\nconst name = \"Vincent\"\n\nfunction greet(){\n  return \"Halo \"+ name + \" !\";\n}\nconst element = <h1> {greet()} </h1>;\n\nReactDOM.render(element,document.getElementById('master'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}